var Q = require('q');
var define = require('./lib/define');
define('api', ['dataLayer'], function (dataLayer) {

    function API() {
    }
    API.prototype.getQuestions = function () {
        var deferred = Q.defer();

        dataLayer.getQuestions().then(function(data){
            deferred.resolve(data.map(function(dbQuestion){
                return QuestionInListModel.populateFromDb(dbQuestion);
            }));
        });
        return deferred.promise;

    };
    API.prototype.createQuestion = function (questionModel) {
        var deferred = Q.defer();
        dataLayer.createQuestion(questionModel).then(function(){
            deferred.resolve();
        });
        return deferred.promise;
    };
    return  new API();
});

define('dataLayer', [], function () {

    var mongoose = require('mongoose');

    var Question = mongoose.model('Question', dbQuestion.schema());
    var Tag = mongoose.model('Tag', dbTag.schema());
    var User = mongoose.model('User', dbUser.schema());

    function DataLayer() {
        mongoose.connect('mongodb://localhost/pleaseExplain');
    }

    DataLayer.prototype.getQuestions = function () {
        var deferred = Q.defer();

        Question.find().exec(function (err, data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };
    DataLayer.prototype.createQuestion = function (questionModel) {
        var deferred = Q.defer();
        console.log(questionModel);
        var question = new Question(questionModel);

        question.save(function (err, data) {
            deferred.resolve(data);
        });


        return deferred.promise;
    };
    return  new DataLayer();
});







define('main', ['api'], function (api) {



    var express = require('express');
    var http = require('http');
    var app = express();


    app.use(function (req, res, next) {
        res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
        res.setHeader('Access-Control-Allow-Credentials', true);
        next();
    });

    app.use(require('express-promise')());
    app.use(require('body-parser')());
    app.use(require('method-override')());
    app.use(require('errorhandler')({ dumpExceptions: true, showStack: true }));

    app.get('/questions', function (req, res) {

        res.json(api.getQuestions());
    });
    app.post('/createQuestion', function (req, res) {

        res.json(api.createQuestion(req.body));
    });

    app.set('port', 2000);

    http.createServer(app).listen(app.get('port'), function () {
        console.log('Express server listening on port ' + app.get('port'));
    });




});

function dbQuestion(){
    this.votes = 0;
    this.answers = 0;
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

dbQuestion.schema=function(){
    return {
        votes:Number,
        answers:Array,
        views:Number,
        text:String,
        tags:[dbTag.schema()],
        lastUpdatedTime:{type:Date,default:Date.now},
        lastPostedUser:dbUser.schema()
    };
};
function dbTag(){
    this.text = '';
}

dbTag.schema=function(){
    return {
        text:String
    };
};
function dbUser(){
    this.name = '';
    this.karma = 0;
}

dbUser.schema=function(){
    return {
        name:String,
            karma:Number
    };
};
function QuestionInListModel() {
    this.votes = 0;
    this.answers = 0;
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

QuestionInListModel.populateFromDb = function (questionDbModel) {

    var questionInListModel = new QuestionInListModel();

    questionInListModel.votes = questionDbModel.votes;
    questionInListModel.answers = questionDbModel.answers.length;
    questionInListModel.views = questionDbModel.views;
    questionInListModel.text = questionDbModel.text;
    questionInListModel.tags = questionDbModel.tags.map(function (tagDbModel) {
        return TagViewModel.populateFromDb(tagDbModel)
    });
    questionInListModel.lastUpdatedTime = 0;
    questionInListModel.lastPostedUser =  questionDbModel.user && TagViewModel.populateFromDb(questionDbModel.user);
    return questionInListModel;
};
function QuestionModel() {
    this.votes = 0;
    this.answers = [];
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

QuestionModel.populateFromDb=function(questionDbModel)
{
    var questionModel = new QuestionModel();
    questionModel.votes = questionDbModel.votes;
    questionModel.answers = questionDbModel.answers;
    questionModel.views = questionDbModel.views;
    questionModel.text = questionDbModel.text;
    questionModel.tags = questionDbModel.tags;
    questionModel.lastUpdatedTime = questionDbModel.lastUpdatedTime;
    questionModel.lastPostedUser = questionDbModel.lastPostedUser;
    return questionModel;
};
function TagModel() {
    this.text = '';
}

TagModel.populateFromDb = function (tagDbModel) {
    var tagModel=new TagModel();
    tagModel.text = tagDbModel.text;
    return tagModel;
};
function UserModel() {
    this.name = '';
    this.karma = 0;
}

UserModel.populateFromDb = function (userDbModel) {

    var userModel = new UserModel();

    userModel.name = userDbModel.name;
    userModel.karma = userDbModel.karma;
    return userModel;
};
define("main");