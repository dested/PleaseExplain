var Q = require('q');
var define = require('./lib/define');
define('api', ['dataLayer'], function (dataLayer) {

    function API() {
    }

    API.prototype.getQuestions = function (questionFilterModel) {
        var deferred = Q.defer();
        dataLayer.getQuestions(questionFilterModel).then(function (data) {
            deferred.resolve(data.map(function (dbQuestion) {
                return QuestionInListModel.populateFromDb(dbQuestion);
            }));
        });
        return deferred.promise;
    };
    API.prototype.getPotentialTags = function (potentialTag) {
        return dataLayer.getPotentialTags(potentialTag);
    };
    API.prototype.getQuestion = function (questionId) {
        var deferred = Q.defer();
        dataLayer.getQuestion(questionId).then(function (data) {
            deferred.resolve(data.map(function (dbQuestion) {
                return QuestionModel.populateFromDb(dbQuestion);
            }));
        });
        return deferred.promise;
    };
    API.prototype.askQuestion = function (askQuestionModel) {
        return dataLayer.askQuestion(askQuestionModel);
    };
    return  new API();
});


define('dataLayer', [], function () {

    var inspect = require('util').inspect;
    var Client = require('mariasql');
    var client;


    function DataLayer() {

        client = new Client();
        client.connect({
            host: '127.0.0.1',
            user: 'root',
            password: 'FuckYou1!',
            db: 'please_explain'
        });


        client.on('connect', function() {
                console.log('Client connected');
            })
            .on('error', function(err) {
                console.log('Client error: ' + err);
            })
            .on('close', function(hadError) {
                console.log('Client closed');
            });

    }

    DataLayer.prototype.close = function () {
        client.end();
    };

    DataLayer.prototype.getQuestions = function(questionFilterModel) {
        var deferred = Q.defer();
        var dbQuestions = [];

        client.query('SELECT Question.*, count(Answer.QuestionId) as AnswerCount FROM Question left JOIN Answer on (Question.QuestionId = Answer.QuestionId) group by question.questionid')
            .on('result', function(res) {

                res.on('row', function (row) {
                        console.log(inspect(row));
                        dbQuestions.push(row);
                    })
                    .on('error', function(err) {
                        console.log('Result error: ' + inspect(err));
                    })
                    .on('end', function(info) {
                    });
            })
            .on('end', function() {
                deferred.resolve(dbQuestions);
            });

        return deferred.promise;
    };

    DataLayer.prototype.getAnswersForQuestion = function (questionFilterModel) {
        var deferred = Q.defer();
        var dbQuestions = [];

        var questionIds = dbQuestions.map(function (a) { return a.questionId; }).join(',');
        console.log(questionIds);
        var answers = {};
        client.query('SELECT * FROM Answer where QuestionId in (' + questionIds + ')')
                .on('result', function (res) {

                    res.on('row', function (row) {
                        if (!answers[row.QuestionId]) {
                            answers[row.QuestionId] = [];
                        }
                        answers[row.QuestionId].push(row.AnswerText);
                        console.log(answers[row.QuestionId]);
                        console.log('Result row: ' + inspect(row));
                    })
                        .on('error', function (err) {
                            console.log('Result error: ' + inspect(err));
                        })
                        .on('end', function (info) {
                            console.log('Result finished successfully');
                        });
                })
                .on('end', function () {

                    for (var i = 0; i < dbQuestions.length; i++) {
                        var dbQuestion = dbQuestions[i];
                        dbQuestion.answers = answers[dbQuestion.questionId] || [];
                        console.log(answers[dbQuestion.questionId]);
                    }

                    console.log('Done with all answers');
                    deferred.resolve(dbQuestions);
                });


        return deferred.promise;
    };

    DataLayer.prototype.getPotentialTags = function (potentialTag) {
        var deferred = Q.defer();
       
        return deferred.promise;
    };
    DataLayer.prototype.askQuestion = function (askQuestionModel) {
        var deferred = Q.defer();
       
        return deferred.promise;
    };
    DataLayer.prototype.getQuestion = function (questionId) {
        var deferred = Q.defer();
         
        return deferred.promise;
    };

    return new DataLayer();
});






define('dataLayerMongo', [], function () {

    var mongoose = require('mongoose');

    var Question = mongoose.model('Question', dbQuestion.schema());
    var Tag = mongoose.model('Tag', dbTag.schema());
    var User = mongoose.model('User', dbUser.schema());

    function DataLayer() {
        mongoose.connect('mongodb://localhost/pleaseExplain');
    }

    DataLayer.prototype.getQuestions = function (questionFilterModel) {
        var deferred = Q.defer();

        Question.find().exec(function (err, data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };
    DataLayer.prototype.getPotentialTags = function (potentialTag) {
        var deferred = Q.defer();
        Tag.find({ text: new RegExp("."+potentialTag+".",'i') })
           .limit(10)
           .exec(function (err, data) {
               deferred.resolve(data);
           });
        return deferred.promise;
    };
    DataLayer.prototype.askQuestion = function (askQuestionModel) {
        var deferred = Q.defer();
        var question = new Question(askQuestionModel);

        question.save(function (err, data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };
    DataLayer.prototype.getQuestion = function (questionId) {
        var deferred = Q.defer();

        Question.find().exec(function (err, data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    return  new DataLayer();
});








define('main', ['api'], function (api) {



    var express = require('express');
    var http = require('http');
    var app = express();


    app.use(function (req, res, next) {
//        res.setHeader('Access-Control-Allow-Origin', 'http://72.14.181.27:3000');
        res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
        res.setHeader('Access-Control-Allow-Credentials', true);
        next();
    });

    app.use(require('express-promise')());
    app.use(require('body-parser')());
    app.use(require('method-override')());
    app.use(require('errorhandler')({ dumpExceptions: true, showStack: true }));

    app.get('/questions', function (req, res) {
        res.json(api.getQuestions());
    });
    app.post('/askQuestion', function (req, res) {
        res.json(api.askQuestion(req.body));
    });

    app.set('port', 2000);

    http.createServer(app).listen(app.get('port'), function () {
        console.log('Express server listening on port ' + app.get('port'));
    });




});


function dbAnswer(){
    this.AnswerId = 0;
    this.QuestionId = 0;
    this.UserId = 0;
    this.AnswerText = '';
} 

function dbQuestion() {
    this.QuestionId = 0;
    this.Title = '';
    this.Text = '';
}


function dbQuestionTag() {
    this.TagId = 0;
    this.QuestionTagId = 0;
} 

function dbQuestionView() {
    this.QuestionViewId = 0;
    this.QuestionId = 0;
    this.UserId = 0;
}


function dbTag() {
    this.TagId = 0;
    this.Text = '';
} 

function dbUser(){
    this.UserId = 0;
    this.UserName = '';
} 

function AskQuestionModel() {
    this.votes = 0;
    this.answers = [];
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}



function QuestionInListModel() {
    this.answerCount = 0;
    this.title = '';
    this.text = '';
}

QuestionInListModel.populateFromDb = function (questionDbModel) {
    var questionInListModel = new QuestionInListModel();
    questionInListModel.answerCount = questionDbModel.AnswerCount;
    questionInListModel.title = questionDbModel.QuestionTitle;
    questionInListModel.text = questionDbModel.QuestionText;
    return questionInListModel;
};

function QuestionModel() {
    this.votes = 0;
    this.answers = [];
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

QuestionModel.populateFromDb=function(questionDbModel)
{
    var questionModel = new QuestionModel();
    questionModel.votes = questionDbModel.votes;
    questionModel.answers = questionDbModel.answers;
    questionModel.views = questionDbModel.views;
    questionModel.text = questionDbModel.text;
    questionModel.tags = questionDbModel.tags;
    questionModel.lastUpdatedTime = questionDbModel.lastUpdatedTime;
    questionModel.lastPostedUser = questionDbModel.lastPostedUser;
    return questionModel;
};

function TagModel() {
    this.text = '';
}

TagModel.populateFromDb = function (tagDbModel) {
    var tagModel=new TagModel();
    tagModel.text = tagDbModel.text;
    return tagModel;
};

function UserModel() {
    this.name = '';
    this.karma = 0;
}

UserModel.populateFromDb = function (userDbModel) {

    var userModel = new UserModel();

    userModel.name = userDbModel.name;
    userModel.karma = userDbModel.karma;
    return userModel;
};

//# sourceMappingURL=server.min.js.map
define("main");