// Declare app level module which depends on filters, and services
angular.module('PleaseExplain', [
    'ngRoute',
    'PleaseExplain.filters',
    'PleaseExplain.config',
    'PleaseExplain.services',
    'PleaseExplain.directives',
    'PleaseExplain.controllers'
]).
    config(['$routeProvider', function ($routeProvider) {
        $routeProvider.when('/questions', {templateUrl: 'partials/questions.html', controller: 'QuestionsCtrl'});
        $routeProvider.when('/question', {templateUrl: 'partials/question.html', controller: 'QuestionCtrl'});
        $routeProvider.otherwise({redirectTo: '/questions'});
    }]);
angular.module('PleaseExplain.config', [])
    .constant('communicationConfig',{
        httpServer:'http://localhost:2000/'
    });
angular.module('PleaseExplain.controllers', [])
    .controller('QuestionsCtrl', ['$scope', 'questionListService', function ($scope, questionListService) {
        $scope.model = {};
        $scope.callback = {};
        $scope.model.questions = [];

        $scope.callback.refreshQuestions = function () {
            questionListService.getQuestionList().then(function (questions) {
                $scope.model.questions = questions.map(function (question) {
                    return new QuestionInListViewModel(question)
                });
            });
        };

        $scope.callback.createQuestion = function () {
            var question = new QuestionModel();
            question.text = 'shoes';
            question.votes = 12;
            questionListService.createQuestion(question).then(function () {
                $scope.callback.refreshQuestions();
            });

        };
       $scope.callback.refreshQuestions();
    }])
    .controller('QuestionCtrl', [function () {

    }]);


angular.module('PleaseExplain.directives', [])
angular.module('PleaseExplain.filters', [])
angular.module('PleaseExplain.services', [])
    .service('questionListService',
    ['$q', '$http', 'communicationConfig',
        function ($q, $http, communicationConfig) {
            this.getQuestionList = function () {
                var deferred = $q.defer();


                $http({method: 'GET', url: communicationConfig.httpServer + 'questions'}).
                    success(function (data, status, headers, config) {
                        deferred.resolve(data);
                    }).
                    error(function (data, status, headers, config) {
                    });

                return deferred.promise;
            };
            this.createQuestion = function (questionModel) {
                var deferred = $q.defer();
                $http({method: 'post', url: communicationConfig.httpServer + 'createQuestion', data: questionModel}).
                    success(function (data, status, headers, config) {
                        deferred.resolve(data);
                    }).
                    error(function (data, status, headers, config) {
                    });

                return deferred.promise;
            };
        }
    ]
);


function QuestionInListViewModel(questionModel) {
    this.votes = questionModel.votes;
    this.answers = questionModel.answers.length;
    this.views = questionModel.views;
    this.text = questionModel.text;
    this.tags = questionModel.tags.map(function (tag) {
        return new TagViewModel(tag)
    });
    this.lastUpdatedTime = 0;
    this.lastPostedUser = questionModel.user && new UserViewModel(questionModel.user);
}


function TagViewModel(tagModel){
    this.text=tagModel.text;
}


function UserViewModel(userModel){
    this.name=userModel.name;
    this.karma=userModel.karma;
}
function QuestionInListModel() {
    this.votes = 0;
    this.answers = 0;
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

QuestionInListModel.populateFromDb = function (questionDbModel) {

    var questionInListModel = new QuestionInListModel();

    questionInListModel.votes = questionDbModel.votes;
    questionInListModel.answers = questionDbModel.answers.length;
    questionInListModel.views = questionDbModel.views;
    questionInListModel.text = questionDbModel.text;
    questionInListModel.tags = questionDbModel.tags.map(function (tagDbModel) {
        return TagViewModel.populateFromDb(tagDbModel)
    });
    questionInListModel.lastUpdatedTime = 0;
    questionInListModel.lastPostedUser =  questionDbModel.user && TagViewModel.populateFromDb(questionDbModel.user);
    return questionInListModel;
};
function QuestionModel() {
    this.votes = 0;
    this.answers = [];
    this.views = 0;
    this.text = '';
    this.tags = [];
    this.lastUpdatedTime = 0;
    this.lastPostedUser = null;
}

QuestionModel.populateFromDb=function(questionDbModel)
{
    var questionModel = new QuestionModel();
    questionModel.votes = questionDbModel.votes;
    questionModel.answers = questionDbModel.answers;
    questionModel.views = questionDbModel.views;
    questionModel.text = questionDbModel.text;
    questionModel.tags = questionDbModel.tags;
    questionModel.lastUpdatedTime = questionDbModel.lastUpdatedTime;
    questionModel.lastPostedUser = questionDbModel.lastPostedUser;
    return questionModel;
};
function TagModel() {
    this.text = '';
}

TagModel.populateFromDb = function (tagDbModel) {
    var tagModel=new TagModel();
    tagModel.text = tagDbModel.text;
    return tagModel;
};
function UserModel() {
    this.name = '';
    this.karma = 0;
}

UserModel.populateFromDb = function (userDbModel) {

    var userModel = new UserModel();

    userModel.name = userDbModel.name;
    userModel.karma = userDbModel.karma;
    return userModel;
};